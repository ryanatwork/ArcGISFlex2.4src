<?xml version="1.0" encoding="utf-8"?>
<!--
     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2010 Esri
     //
     // All rights reserved under the copyright laws of the United States.
     // You may freely redistribute and use this software, with or
     // without modification, provided you include the original copyright
     // and use restrictions.  See use restrictions in the file:
     // <install location>/License.txt
     //
     ////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   layout="horizontal"
                   widgetConfigLoaded="basewidget_widgetConfigLoadedHandler(event)">

    <fx:Script>
        <![CDATA[
            import com.esri.ags.events.MapEvent;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.utils.WebMercatorUtil;

            import mx.formatters.NumberBaseRoundType;
            import mx.utils.ColorUtil;
            import mx.utils.StringUtil;

            private var m_template:String;
            private var m_func:Function = substitute;

            protected function basewidget_widgetConfigLoadedHandler(event:Event):void
            {
                if (configXML)
                {
                    const decimalSeparator:String = configXML.numberformatter.@decimalseparator
                    numberFormatter.decimalSeparatorTo = decimalSeparator.length ? decimalSeparator : ".";
                    const thousandsSeparator:String = configXML.numberformatter.@thousandsseparator;
                    numberFormatter.thousandsSeparatorTo = thousandsSeparator.length ? thousandsSeparator : ",";
                    numberFormatter.useThousandsSeparator = configXML.numberformatter.@usethousandsseparator == "true";
                    numberFormatter.precision = parseFloat(configXML.numberformatter.@precision || "-1");
                    const rounding:String = configXML.numberformatter.@rounding;
                    numberFormatter.rounding = rounding.length ? rounding : NumberBaseRoundType.NONE;

                    const color:String = configXML.label.@color;
                    coords.setStyle("color", toNumber(color.length ? color : "0x000000"));
                    const fontFamily:String = configXML.label.@fontfamily;
                    coords.setStyle("fontFamily", fontFamily.length ? fontFamily : "Verdana");
                    const fontSize:String = configXML.label.@fontsize;
                    coords.setStyle("fontSize", parseInt(fontSize.length ? fontSize : "9"));
                    const fontWeight:String = configXML.label.@fontweight;
                    coords.setStyle("fontWeight", fontWeight.length ? fontWeight : "bold");

                    // If no template specified, show them with a space in between (except for special case below)
                    m_template = configXML.label.@template || "{0} {1}";

                    if (map.loaded)
                    {
                        map_loadHandler(null);
                    }
                    else
                    {
                        map.addEventListener(MapEvent.LOAD, map_loadHandler);
                    }
                }

                function map_loadHandler(event:MapEvent):void
                {
                    map.removeEventListener(MapEvent.LOAD, map_loadHandler);
                    const wkid:int = map.spatialReference.wkid;
                    m_func = substitute;
                    const outputUnit:String = configXML.outputunit;
                    if (outputUnit === "mercator")
                    {
                        if (wkid === 4326 || wkid === 4269 || wkid === 4267)
                        {
                            m_func = geographicToMercator;
                        }
                    }
                    else if (outputUnit === "geo")
                    {
                        if (wkid === 102100 || wkid === 102113 || wkid === 3857)
                        {
                            m_func = mercatorToGeographic;
                            // special default for geographic outputs
                            m_template = configXML.label.@template || getDefaultString("latitudeLabel") + ":{1}   " + getDefaultString("longitudeLabel") + ":{0}";
                            numberFormatter.precision = parseFloat(configXML.numberformatter.@precision || "6");
                        }
                        else if (wkid === 4326 || wkid === 4269 || wkid === 4267)
                        {
                            // special default for geographic outputs
                            m_template = configXML.label.@template || getDefaultString("latitudeLabel") + ":{1}   " + getDefaultString("longitudeLabel") + ":{0}";
                            numberFormatter.precision = parseFloat(configXML.numberformatter.@precision || "6");
                        }
                    }
                    else if (outputUnit === "dms")
                    {
                        if (wkid === 102100 || wkid === 102113 || wkid === 3857)
                        {
                            m_func = mercatorToDMS;
                        }
                        else if (wkid === 4326 || wkid === 4269 || wkid === 4267)
                        {
                            m_func = geographicToDMS;
                        }
                    }
                    map.addEventListener(MouseEvent.MOUSE_MOVE, map_mouseMoveHandler);
                }
            }

            private function toNumber(value:String):int
            {
                if (value.substr(0, 2) == "0x")
                {
                    return parseInt(value, 16);
                }
                return parseInt(value, 10);
            }

            private function mercatorToGeographic(web:MapPoint):String
            {
                const geo:MapPoint = WebMercatorUtil.webMercatorToGeographic(web) as MapPoint;
                return StringUtil.substitute(m_template,
                                             numberFormatter.format(geo.x),
                                             numberFormatter.format(geo.y));
            }

            private function mercatorToDMS(web:MapPoint):String
            {
                const geo:MapPoint = WebMercatorUtil.webMercatorToGeographic(web) as MapPoint;
                return StringUtil.substitute(m_template, DegToDMS.format(geo.x, DegToDMS.LON), DegToDMS.format(geo.y, DegToDMS.LAT));
            }

            private function geographicToMercator(geo:MapPoint):String
            {
                const web:MapPoint = WebMercatorUtil.geographicToWebMercator(geo) as MapPoint;
                return StringUtil.substitute(m_template,
                                             numberFormatter.format(web.x),
                                             numberFormatter.format(web.y));
            }

            private function substitute(mapPoint:MapPoint):String
            {
                return StringUtil.substitute(m_template,
                                             numberFormatter.format(mapPoint.x),
                                             numberFormatter.format(mapPoint.y));
            }

            private function geographicToDMS(mapPoint:MapPoint):String
            {
                const x:String = DegToDMS.format(mapPoint.x, DegToDMS.LON);
                const y:String = DegToDMS.format(mapPoint.y, DegToDMS.LAT);
                return StringUtil.substitute(m_template, x, y);
            }

            private function map_mouseMoveHandler(event:MouseEvent):void
            {
                const mapPoint:MapPoint = map.toMapFromStage(event.stageX, event.stageY);
                coords.text = m_func(mapPoint);
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <mx:NumberFormatter id="numberFormatter"/>
    </fx:Declarations>
    <viewer:filters>
        <mx:GlowFilter alpha="1"
                       blurX="3"
                       blurY="3"
                       color="0xFFFFFF"
                       strength="7"/>
    </viewer:filters>
    <s:Label id="coords" color="0x000000"/>
</viewer:BaseWidget>

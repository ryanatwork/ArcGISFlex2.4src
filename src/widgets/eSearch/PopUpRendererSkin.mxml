<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (c) 2011 ESRI

     All rights reserved under the copyright laws of the United States
     and applicable international laws, treaties, and conventions.

     You may freely redistribute and use this sample code, with or
     without modification, provided you include the original copyright
     notice and use restrictions.

     See use restrictions in use_restrictions.txt.
-->
<!---
     The default skin class for the PopUpRenderer component.
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:mx="library://ns.adobe.com/flex/mx"
             xmlns:esri="http://www.esri.com/2008/ags"
             xmlns:supportClasses="com.esri.ags.skins.supportClasses.*"
             width="270"
             maxHeight="300"
             preinitialize="skin_preinitializeHandler(event)">

    <fx:Metadata>
        /**
         * A strongly typed property that references the component to which this skin is applied.
         */
        [HostComponent("com.esri.ags.webmap.PopUpRenderer")]
    </fx:Metadata>

    <fx:Style>
        .formStyle
        {
            indicatorGap: 5;
            labelWidth: 100;
            paddingBottom: 5;
            paddingLeft: 0;
            paddingRight: 0;
            paddingTop: 5;
			labelWidth: 150;
        }
    </fx:Style>

    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.Map;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.geometry.Geometry;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.geometry.Multipoint;
            import com.esri.ags.layers.FeatureLayer;
            import com.esri.ags.layers.supportClasses.LayerDetails;
            import com.esri.ags.skins.supportClasses.AttachmentMouseEvent;
            import com.esri.ags.skins.supportClasses.PopUpText;
            import com.esri.ags.utils.StringUtil;
            import com.esri.ags.webmap.supportClasses.PopUpFieldInfo;
            import com.esri.ags.webmap.supportClasses.PopUpInfo;

            import mx.containers.Form;
            import mx.containers.FormItem;
			import mx.controls.Alert;
            import mx.controls.Label;
            import mx.core.ScrollPolicy;
            import mx.events.FlexEvent;

            private var textStyleSheet:StyleSheet;

            /* Define the symbol fill items that should be colored by the "symbolColor" style.*/
            private static const symbols:Array = [ "titleLineSymbol" ];

            /**
             * @private
             */
            override public function get symbolItems():Array
            {
                return symbols;
            }

            private function skin_preinitializeHandler(event:FlexEvent):void
            {
                // set the "a" tag styles
                textStyleSheet = new StyleSheet();
                textStyleSheet.setStyle("a:link", { color: getCSSStyleColor("linkNormalColor"), textDecoration: "underline" });
                textStyleSheet.setStyle("a:hover", { color: getCSSStyleColor("linkHoverColor"), textDecoration: "underline" });
                textStyleSheet.setStyle("a:active", { color: getCSSStyleColor("linkActiveColor"), textDecoration: "underline" });

                attachmentInspector.addEventListener(AttachmentMouseEvent.ATTACHMENT_CLICK, attachmentInspector_attachmentClickHandler);
            }

            private function getCSSStyleColor(styleProp:String):String
            {
                var color:uint = getStyle(styleProp);
                var cssColor:String = color.toString(16).toUpperCase();
                cssColor = ("00000" + cssColor).substr(-6); // make sure value is padded with 0's
                return "#" + cssColor;
            }

            private function attachmentInspector_attachmentClickHandler(event:AttachmentMouseEvent):void
            {
                navigateToURL(new URLRequest(event.attachmentInfo.url));
            }

            /**
             * @private
             */
            override protected function commitProperties():void
            {
                super.commitProperties();

                var featureLayer:FeatureLayer = hostComponent.featureLayer;
                var formattedAttributes:Object = hostComponent.formattedAttributes;
                var graphic:Graphic = hostComponent.graphic;
                var map:Map = hostComponent.map;
                var popUpInfo:PopUpInfo = hostComponent.popUpInfo;
                var validMediaInfos:Array = hostComponent.validPopUpMediaInfos;
                var geometry:Geometry = graphic ? graphic.geometry : null;
                var layerDetails:LayerDetails = featureLayer ? featureLayer.layerDetails : null;

                vGroup.removeAllElements();
                if (popUpInfo)
                {
                    if (popUpInfo.title)
                    {
                        titleText.text = StringUtil.substitute(popUpInfo.title, formattedAttributes);
                        if (titleText.text)
                        {
                            vGroup.addElement(titleText);
                            vGroup.addElement(titleLine);
                        }
                    }

                    var htmlText:String;
                    if (popUpInfo.description)
                    {
                        htmlText = StringUtil.substitute(popUpInfo.description, formattedAttributes);
                        if (htmlText)
                        {
                            var descriptionText:Text = new PopUpText();
                            descriptionText.percentWidth = 100;
                            descriptionText.styleSheet = textStyleSheet;

                            cleanAndSetHtmlText(descriptionText, htmlText);
							trace(descriptionText.htmlText);
                            vGroup.addElement(descriptionText);
                        }
                    }
                    else
                    {
                        var descriptionForm:Form;
                        for each (var fieldInfo:PopUpFieldInfo in popUpInfo.popUpFieldInfos)
                        {
                            if (fieldInfo.visible)
                            {
                                var formItem:FormItem = new FormItem();
                                formItem.label = fieldInfo.label || fieldInfo.fieldName;

                                var label:Label;
                                htmlText = formattedAttributes[fieldInfo.fieldName];
                                if (htmlText)
                                {
                                    // convert attribute field values that just contain URLs into links
                                    var match:Array = htmlText.match(/^\s*((https?|ftp):\/\/\S+)\s*$/i);
                                    if (match && match.length > 0)
                                    {
                                        label = new Label();
                                        htmlText = '<a href="' + match[1] + '" target="_blank">' + match[1] + "</a>";
                                    }
                                    else
                                    {
                                        label = new PopUpText();
                                    }
                                    cleanAndSetHtmlText(label, htmlText);
                                    label.selectable = true;
                                    label.styleSheet = this.textStyleSheet;
                                    label.width = 150;
                                    formItem.addChild(label);
                                }
                                if (!descriptionForm)
                                {
                                    descriptionForm = new Form();
                                    descriptionForm.percentWidth = 100;
                                    descriptionForm.horizontalScrollPolicy = ScrollPolicy.OFF;
                                    descriptionForm.verticalScrollPolicy = ScrollPolicy.OFF;
                                    descriptionForm.styleName = "formStyle";
                                }
                                descriptionForm.addChild(formItem);
                            }
                        }
                        if (descriptionForm)
                        {
                            vGroup.addElement(descriptionForm);
                        }
                    }

                    if (validMediaInfos && validMediaInfos.length > 0)
                    {
                        vGroup.addElement(mediaBrowser);
                        mediaBrowser.attributes = graphic.attributes;
                        mediaBrowser.formattedAttributes = formattedAttributes;
                        mediaBrowser.popUpFieldInfos = popUpInfo.popUpFieldInfos;
                        mediaBrowser.popUpMediaInfos = validMediaInfos;
                    }

                    if (popUpInfo.showAttachments && graphic && featureLayer
                        && layerDetails && layerDetails.hasAttachments && layerDetails.objectIdField)
                    {
                        vGroup.addElement(attachmentInspector);
                        attachmentInspector.showAttachments(graphic, featureLayer);
                    }

                    if (map && geometry)
                    {
                        vGroup.addElement(zoomToButton);
                    }
                }
            }

            private function cleanAndSetHtmlText(labelCntrl:Label, htmlText:String):void
            {
                if (labelCntrl && htmlText != null)
                {
                    htmlText = htmlText.replace(/<div/gi, "<br /><div"); // divs are ignored so put br's in front of them
                    htmlText = htmlText.replace(/<div><br ?\/><\/div>/gi, ""); // remove existing <div><br /></div>'s so we don't have too many new lines
                    // add target="_blank" to all anchor tags
                    htmlText = htmlText.replace(/<a.*?href\s*=\s*["']([^"']*).*?>(.*?)<\/a\s*>/gi, '<a href="$1" target="_blank">$2</a>');
                    labelCntrl.htmlText = htmlText;
                }
            }

            private function zoomToButton_clickHandler(event:MouseEvent):void
            {
                var graphic:Graphic = hostComponent.graphic;
                var map:Map = hostComponent.map;
                var geometry:Geometry = graphic.geometry;

                var extent:Extent = geometry.extent; // returns null for MapPoint or Multipoint's with only one point
                if (extent)
                {
                    map.extent = extent;
                    // make sure the whole extent is visible
                    if (!map.extent.contains(extent))
                    {
                        map.level--;
                    }
                }
                else
                {
                    var mapPoint:MapPoint;
                    if (geometry is MapPoint)
                    {
                        mapPoint = geometry as MapPoint;
                    }
                    else if (geometry is Multipoint)
                    {
                        var multipoint:Multipoint = geometry as Multipoint;
                        if (multipoint.points && multipoint.points.length > 0)
                        {
                            mapPoint = multipoint.points[0];
                        }
                    }
                    if (mapPoint)
                    {
                        // Zoom to 1/16th the size of the current extent.
                        // This is the same as calling map.zoomIn() four times.
                        map.zoom(1 / 16, mapPoint);
                    }
                }
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <!--- @private -->
        <mx:Text id="titleText"
                 width="100%"
                 fontWeight="bold"/>

        <!--- @private -->
        <s:Line id="titleLine" width="100%">
            <s:stroke>
                <s:SolidColorStroke id="titleLineSymbol"
                                    color="black"
                                    weight="1"/>
            </s:stroke>
        </s:Line>

        <!--- @private -->
        <supportClasses:PopUpMediaBrowser id="mediaBrowser"
                                          width="100%"
                                          skinClass="com.esri.ags.skins.supportClasses.PopUpMediaBrowserSkin"/>

        <!--- @private -->
        <esri:AttachmentInspector id="attachmentInspector"
                                  width="100%"
                                  addEnabled="false"
                                  deleteEnabled="false"/>

        <!--- @private -->
        <mx:LinkButton id="zoomToButton"
                       click="zoomToButton_clickHandler(event)"
                       fontWeight="bold"
                       label="{resourceManager.getString('ESRIMessages', 'zoomLabel')}"/>
    </fx:Declarations>

    <s:Scroller width="100%" height="100%">
        <!--- @private -->
        <s:VGroup id="vGroup"
                  paddingBottom="5"
                  paddingLeft="5"
                  paddingRight="5"
                  paddingTop="5">
            <!-- elements are added in commitProperties() -->
        </s:VGroup>
    </s:Scroller>

</s:SparkSkin>

<?xml version="1.0" encoding="utf-8"?>
<!--
     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2010-2011 Esri
     //
     // All rights reserved under the copyright laws of the United States.
     // You may freely redistribute and use this software, with or
     // without modification, provided you include the original copyright
     // and use restrictions.  See use restrictions in the file:
     // <install location>/License.txt
     //
     ////////////////////////////////////////////////////////////////////////////////
-->
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:s="library://ns.adobe.com/flex/spark"
                      xmlns:mx="library://ns.adobe.com/flex/mx"
                      width="100%" height="100%"
                      creationComplete="init()">

    <fx:Script>
        <![CDATA[
            import com.esri.ags.Map;
            import com.esri.ags.layers.supportClasses.LayerInfoWindowRenderer;
            import com.esri.viewer.AppEvent;
            import com.esri.viewer.ConfigData;
            import com.esri.viewer.IBaseWidget;
            import com.esri.viewer.IInfowindowTemplate;
            import com.esri.viewer.IWidgetContainer;
            import com.esri.viewer.WidgetStates;
            import com.esri.viewer.utils.Hashtable;

            import mx.core.IVisualElement;
            import mx.core.UIComponent;
            import mx.events.ModuleEvent;
            import mx.managers.HistoryManager;
            import mx.managers.IFocusManagerComponent;
            import mx.modules.IModuleInfo;
            import mx.modules.ModuleManager;

            import spark.components.Group;

            private var hist:HistoryManager;

            private var configData:ConfigData;

            private var map:Map;

            private var moduleTable:Hashtable = new Hashtable();

            private var widgetTable:Hashtable = new Hashtable();

            private var controlTable:Hashtable = new Hashtable();

            private var containerTable:Hashtable = new Hashtable();

            private var infowidgetTable:Hashtable = new Hashtable();

            private var wgtInfo:IModuleInfo;

            private var ctlInfo:IModuleInfo;

            private var ctnInfo:IModuleInfo;

            private var isDraggable:Boolean = true;

            private var preloadArray:Array = [];

            private var _refX:Number = 0;

            private var _refY:Number = 0;

            private var controlContainer:Group;

            /**
             * Get the widget by widget ID.
             * Returns the widget by ID if the widget has been loaded.
             * Returns null if the widget has not been loaded, and at the same time, trigger the loading of the widget.
             *
             * @param widgetId The widget ID.
             * @param openWidgetIfNot Indicates whether to open the widget if it is not in the open state.
             *
             * @return The widget for the ID, null if the widget has not been loaded.
             *
             * @throws ArgumentError The widget ID does not exist.
             *
             */
            public function getWidget(widgetId:Number, openWidgetIfNot:Boolean = false):IBaseWidget
            {
                var idx:Object = configData.widgetIndex[widgetId];

                if (idx == null)
                {
                    throw new ArgumentError("Invalid widgetId: " + widgetId);
                }

                var widget:IBaseWidget = null;
                var wgt:Object = configData.widgetContainers[idx.container].widgets[idx.widget];
                var wgtContainer:IWidgetContainer = configData.widgetContainers[idx.container].container.obj;

                if (widgetTable.containsKey(widgetId))
                {
                    widget = widgetTable.find(widgetId) as IBaseWidget;

                    if (openWidgetIfNot && widget.getState() == WidgetStates.WIDGET_CLOSED)
                    {
                        openWidget(widget);
                    }
                }
                else
                {
                    if (moduleTable.containsKey(wgt.url))
                    {
                        widget = createWidget(widgetId);
                        if (openWidgetIfNot && widget.getState() == WidgetStates.WIDGET_CLOSED)
                        {
                            openWidget(widget);
                        }
                    }
                    else
                    {
                        loadWidget(widgetId);
                    }
                }
                return widget;
            }

            /**
             * @return The array of the ID's of the widgets which have been loaded.
             *
             */
            public function getAllLoadedWidgetIds():Array
            {
                return widgetTable.getKeySet();
            }

            /**
             * @return The number of the total widgets.
             *
             */
            public function getNumWidgets():Number
            {
                return configData.widgetIndex.length;
            }

            /**
             * @return The widget id of a give widget
             *
             */
            public function getWidgetId(widgetLabel:String):Number
            {
                var id:Number = Number.NaN;
                for (var i:Number = 0; i < configData.widgets.length; i++)
                {
                    if (configData.widgets[i].label == widgetLabel)
                    {
                        id = configData.widgets[i].id;
                    }
                }
                return id;
            }

            private function init():void
            {
                AppEvent.addListener(AppEvent.CONFIG_LOADED, configLoadedHandler);
                AppEvent.addListener(AppEvent.MAP_LOADED, mapLoadedHandler);
                AppEvent.addListener(AppEvent.WIDGET_RUN, onRunWidget);
                AppEvent.addListener(AppEvent.WIDGET_ADDED, widgetAddedHandler);
                AppEvent.addListener(AppEvent.DATA_CREATE_INFOWIDGET, onInfowidgetRequest);
                AppEvent.addListener(AppEvent.WIDGET_FOCUS, focusWidgetHandler);
                AppEvent.addListener(AppEvent.WIDGET_STATE_CHANGED, widgetClosedHandler);
                AppEvent.addListener(AppEvent.WIDGET_CLOSE, widgetCloseHandler);

                //TODO: no real time change layout for V2.0
                //AppEvent.addListener(AppEvent.CHANGE_LAYOUT, changeLayoutHandler);

                //TODO: no real time resizing for V2.0
                //AppEvent.addListener(AppEvent.WIDGET_MGR_RESIZE, resizeManagerView);
            }

            private function configLoadedHandler(event:AppEvent):void
            {
                configData = event.data as ConfigData;

                startLoadWidgetContainers();
            }

            private function mapLoadedHandler(event:AppEvent):void
            {
                map = event.data as Map;
            }

            //=====================================================================
            // Load widget containers
            //=====================================================================
            private var containerList:Array = new Array();

            private function startLoadWidgetContainers():void
            {
                var containers:Array = configData.widgetContainers;
                if (containers)
                {
                    for (var i:int = 0; i < containers.length; i++)
                    {
                        containerList.push(containers[i].container);
                    }
                    loadNextContainer();
                }
            }

            private function loadNextContainer():void
            {
                if (containerList.length)
                {
                    var ctn:Object = containerList[0];
                    containerList.splice(0, 1);
                    loadContainer(ctn);
                }
                else
                {
                    startLoadControls();
                }
            }

            private function loadContainer(ctn:Object):void
            {
                ctnInfo = ModuleManager.getModule(ctn.url);
                ctnInfo.data = ctn;
                ctnInfo.addEventListener(ModuleEvent.READY, onContainerReady);
                ctnInfo.addEventListener(ModuleEvent.ERROR, moduleErrorHandler);
                ctnInfo.load(null, null, null, moduleFactory);
            }

            private function onContainerReady(event:ModuleEvent):void
            {
                var info:IModuleInfo = event.module;
                var ctnData:Object = info.data;
                containerTable.add(ctnData.url, info);

                var bcontainer:IWidgetContainer = info.factory.create() as IWidgetContainer;

                ctnData.obj = bcontainer;
                bcontainer.configParams = ctnData;

                var ctnIVE:IVisualElement = bcontainer as IVisualElement;

                this.addElement(ctnIVE);
                loadNextContainer();
            }


            //=====================================================================
            // Load controllers
            //=====================================================================
            private var controllerList:Array = [];

            private function startLoadControls():void
            {
                controlContainer = new Group();
                controlContainer.percentHeight = 100;
                controlContainer.percentWidth = 100;

                this.addElementAt(controlContainer, 0);

                var controls:Array = configData.controls;
                if (controls)
                {
                    for (var i:uint = 0; i < controls.length; i++)
                    {
                        controllerList.push(controls[i]);
                    }
                }
                this.cursorManager.setBusyCursor();
                loadNextControl();
            }

            private function loadNextControl():void
            {
                if (controllerList.length)
                {
                    var ctl:Object = controllerList[0];
                    controllerList.splice(0, 1);
                    loadControl(ctl);
                }
                else
                {
                    //load pre load widget after controllers are loaded
                    this.cursorManager.removeBusyCursor();
                    preloadWidgets();
                }
            }

            private function loadControl(ctl:Object):void
            {
                ctlInfo = ModuleManager.getModule(ctl.url);
                ctlInfo.data = ctl;
                ctlInfo.addEventListener(ModuleEvent.READY, moduleReadyHandler);
                ctlInfo.addEventListener(ModuleEvent.ERROR, moduleErrorHandler);
                ctlInfo.load(null, null, null, moduleFactory);
            }

            private function moduleReadyHandler(event:ModuleEvent):void
            {
                var moduleInfo:IModuleInfo = event.module;
                var moduleData:Object = moduleInfo.data;
                controlTable.add(moduleData.url, moduleInfo);

                var config:String = moduleData.config as String;

                var baseWidget:IBaseWidget = moduleInfo.factory.create() as IBaseWidget;

                baseWidget.widgetId = moduleData.id as Number;
                baseWidget.widgetTitle = moduleData.label;
                baseWidget.widgetIcon = moduleData.icon;
                baseWidget.config = config;
                baseWidget.configData = configData;
                baseWidget.map = map;
                baseWidget.setRelativePosition(moduleData.left, moduleData.right, moduleData.top, moduleData.bottom);
                baseWidget.horizontalCenter = moduleData.horizontalCenter
                baseWidget.verticalCenter = moduleData.verticalCenter;
                baseWidget.run();

                var visualElement:IVisualElement = baseWidget as IVisualElement;
                if (visualElement)
                {
                    controlContainer.addElement(visualElement);
                }
                loadNextControl();
            }

            //=====================================================================
            // Load preload widgets
            //=====================================================================
            private function preloadWidgets():void
            {
                for (var i:Number = 0; i < configData.widgets.length; i++)
                {
                    var id:Number = configData.widgets[i].id;
                    var preload:String = configData.widgets[i].preload;
                    if (preload == "open" || preload == "minimized")
                    {
                        preloadArray.push(configData.widgets[i]);
                    }
                }
                preloadNextWidget();
            }

            private function preloadNextWidget():void
            {
                if (preloadArray.length > 0)
                {
                    var id:Number = preloadArray[0].id;
                    preloadArray.splice(0, 1);
                    AppEvent.dispatch(AppEvent.WIDGET_RUN, id);
                }
            }

            //=====================================================================
            // Load widgets
            //=====================================================================

            private var widgetAdded:Boolean = false;

            private function createWidget(widgetId:Number):IBaseWidget
            {
                var idx:Object = configData.widgetIndex[widgetId];

                var wgt:Object = configData.widgetContainers[idx.container].widgets[idx.widget];

                var preload:String = wgt.preload;
                var label:String = wgt.label;
                var icon:String = wgt.icon;
                var config:String = wgt.config;
                var url:String = wgt.url;

                var wWidth:Number = Number(wgt.width);
                var wHeight:Number = Number(wgt.height);
                var wx:Number = Number(wgt.x);
                var wy:Number = Number(wgt.y);
                var wleft:String = wgt.left;
                var wtop:String = wgt.top;
                var wright:String = wgt.right;
                var wbottom:String = wgt.bottom;
                var wHorizontalCenter:String = wgt.horizontalCenter;
                var wVerticalCenter:String = wgt.verticalCenter;

                var modInfo:IModuleInfo = moduleTable.find(url) as IModuleInfo;
                var widget:IBaseWidget;
                widget = modInfo.factory.create() as IBaseWidget;
                widget.widgetId = widgetId;
                widget.widgetTitle = label;
                widget.widgetIcon = icon;
                widget.config = config;
                widget.configData = configData;
                widget.map = map;
                widget.isDraggable = this.isDraggable;

                widget.setPreload(preload);

                widget.initialHeight = wHeight;
                widget.initialWidth = wWidth;

                widget.horizontalCenter = wHorizontalCenter;
                widget.verticalCenter = wVerticalCenter;

                // if no X and Y both configured, use system X/Y for positioning
                if (wleft || wtop || wright || wbottom)
                {
                    widget.setRelativePosition(wleft, wright, wtop, wbottom);
                }
                else if (wx && wy)
                {
                    widget.setXYPosition(wx, wy);
                }
                else
                {
                    setAutoXY();
                    wx = _refX;
                    wy = _refY
                    widget.setXYPosition(wx, wy);
                }
                widgetTable.add(widgetId, widget);

                return widget;
            }

            private function openWidget(widget:IBaseWidget):void
            {
                var idx:Object = configData.widgetIndex[widget.widgetId];
                var wgtContainer:IWidgetContainer = configData.widgetContainers[idx.container].container.obj;

                widget.setState(WidgetStates.WIDGET_OPENED);
                widget.addEventListener(MouseEvent.MOUSE_DOWN, onWidgetMouseDown);
                wgtContainer.addWidget(widget);
            }

            private function runWidget(widgetId:Number):void
            {
                var widget:IBaseWidget = createWidget(widgetId);
                openWidget(widget);
            }

            private function onRunWidget(event:AppEvent):void
            {
                var id:Number = event.data as Number;
                var idx:Object = configData.widgetIndex[id];

                var wgtContainer:IWidgetContainer = configData.widgetContainers[idx.container].container.obj;
                var wgt:Object = configData.widgetContainers[idx.container].widgets[idx.widget];

                if (!widgetAdded)
                {
                    widgetAdded = true;
                }

                //widget loaded
                var widget:IBaseWidget;
                if (widgetTable.containsKey(id))
                {
                    widget = widgetTable.find(id) as IBaseWidget;

                    //add back the container if exists
                    widget.setState(WidgetStates.WIDGET_OPENED);
                    wgtContainer.addWidget(widget);
                }
                else
                {
                    //module loaded
                    if (moduleTable.containsKey(wgt.url))
                    {
                        runWidget(id);
                    }
                    else
                    {
                        loadWidget(id);
                    }
                }
            }

            private function loadWidget(id:Number):void
            {
                var idx:Object = configData.widgetIndex[id];
                var wgt:Object = configData.widgetContainers[idx.container].widgets[idx.widget];
                var preload:String = wgt.preload;
                var url:String = wgt.url;

                wgtInfo = ModuleManager.getModule(url);
                wgtInfo.data =
                    {
                        id: id,
                        preload: preload
                    };
                wgtInfo.addEventListener(ModuleEvent.READY, widgetReadyHandler);
                wgtInfo.addEventListener(ModuleEvent.ERROR, moduleErrorHandler);
                wgtInfo.load(null, null, null, moduleFactory);
                this.cursorManager.setBusyCursor();
            }

            private function widgetReadyHandler(event:ModuleEvent):void
            {
                this.cursorManager.removeBusyCursor();

                var info:IModuleInfo = event.module;
                moduleTable.add(info.url, info);

                var id:Number = info.data.id;
                runWidget(id);
            }

            private function setAutoXY():void
            {
                var widgetWidget:Number = 300;

                var siftUnit:Number = 20;

                if (_refX == 0)
                {
                    _refX = siftUnit;
                }
                else
                {
                    _refX = _refX + widgetWidget + 20;
                }

                if (_refY == 0)
                {
                    _refY = Math.round(widgetWidget / 2);
                }

                if (((_refX + widgetWidget) > this.width))
                {
                    _refX = siftUnit
                    _refY = _refY + Math.round(widgetWidget + siftUnit) / 2;
                }
                else if ((_refY + widgetWidget) > this.height)
                {
                    _refX = siftUnit;
                    _refY = Math.round(widgetWidget / 2);
                }
            }

            private function onWidgetMouseDown(event:MouseEvent):void
            {
                var currentWidget:IBaseWidget = event.currentTarget as IBaseWidget;

                if (currentWidget == null)
                {
                    return;
                }

                var wgtContainer:IWidgetContainer = getWidgetContainer(currentWidget.widgetId);
                if (wgtContainer != null && wgtContainer.isBasicLayout())
                {
                    wgtContainer.focusWidget(currentWidget.widgetId);
                }

                if ((currentWidget is UIComponent)
                    && !isFocusInWidget(currentWidget))
                {
                    (currentWidget as UIComponent).setFocus();
                }
            }

            private function getWidgetContainer(widgetId:Number):IWidgetContainer
            {
                var idx:Object = configData.widgetIndex[widgetId];
                var wgtContainer:IWidgetContainer = null;

                if (idx)
                {
                    wgtContainer = configData.widgetContainers[idx.container].container.obj;
                }

                return wgtContainer;
            }

            private function isFocusInWidget(widget:IBaseWidget):Boolean
            {
                var currentFocusedObj:IFocusManagerComponent = focusManager.getFocus();
                if (currentFocusedObj == null)
                {
                    return false;
                }

                var temp:DisplayObject = currentFocusedObj as DisplayObject;
                while (temp != null && temp != widget)
                {
                    temp = temp.parent;
                }

                return temp != null;
            }

            /* --------------------------------------------------------------------
               Load Infowidnow Template Widgets
             * -------------------------------------------------------------------- */
            private var m_infoWidgetInfo:IModuleInfo;

            private var m_infoWidgetCallback:Function;

            private function onInfowidgetRequest(event:AppEvent):void
            {
                m_infoWidgetCallback = event.callback;
                var url:String = event.data.url as String;
                var id:String = event.data.id as String;
                var config:String = event.data.config as String;
                var isOptLayer:Boolean = event.data.isOptLayer as Boolean;
                var layerInfoWindowRenderer:LayerInfoWindowRenderer = event.data.layerInfoWindowRenderer as LayerInfoWindowRenderer;

                if (infowidgetTable.containsKey(url))
                {
                    m_infoWidgetInfo = infowidgetTable.find(url) as IModuleInfo;
                    m_infoWidgetInfo.data.id = id;
                    m_infoWidgetInfo.data.config = config;
                    m_infoWidgetInfo.data.isOptLayer = isOptLayer;
                    m_infoWidgetInfo.data.layerInfoWindowRenderer = layerInfoWindowRenderer;
                    createInfoTemplate(m_infoWidgetInfo);
                }
                else
                {
                    loadInfoWidget(url, id, config, isOptLayer, layerInfoWindowRenderer);
                }
            }

            private function loadInfoWidget(url:String, id:String, config:String, isOptLayer:Boolean, layerInfoWindowRenderer:LayerInfoWindowRenderer):void
            {
                m_infoWidgetInfo = ModuleManager.getModule(url);
                m_infoWidgetInfo.data =
                    {
                        url: url,
                        id: id,
                        config: config,
                        isOptLayer: isOptLayer,
                        layerInfoWindowRenderer: layerInfoWindowRenderer
                    };
                m_infoWidgetInfo.addEventListener(ModuleEvent.READY, infoWidgetReadyHandler);
                m_infoWidgetInfo.addEventListener(ModuleEvent.ERROR, moduleErrorHandler);
                m_infoWidgetInfo.load(null, null, null, moduleFactory);
            }

            private function infoWidgetReadyHandler(event:ModuleEvent):void
            {
                var moduleInfo:IModuleInfo = event.module;
                var url:String = moduleInfo.data.url as String;
                infowidgetTable.add(url, moduleInfo);
                createInfoTemplate(moduleInfo);
            }

            private var _infoData:Object;

            private function createInfoTemplate(moduleInfo:IModuleInfo):void
            {
                var infoWidget:IInfowindowTemplate = moduleInfo.factory.create() as IInfowindowTemplate;
                var url:String = moduleInfo.data.url as String;
                var id:String = moduleInfo.data.id as String;
                var config:String = moduleInfo.data.config as String;
                var isOptLayer:Boolean = moduleInfo.data.isOptLayer as Boolean;
                var layerInfoWindowRenderer:LayerInfoWindowRenderer = moduleInfo.data.layerInfoWindowRenderer as LayerInfoWindowRenderer;

                if (infoWidget)
                {
                    _infoData =
                        {
                            url: url,
                            id: id,
                            config: config,
                            infoWidget: infoWidget,
                            isOptLayer: isOptLayer,
                            layerInfoWindowRenderer: layerInfoWindowRenderer
                        };

                    if (config)
                    {
                        var baseWidget:IBaseWidget = infoWidget as IBaseWidget;

                        baseWidget.setInfoConfig(config, false);
                        baseWidget.addEventListener("widgetConfigLoaded", widgetConfigLoadedHandler);
                    }
                    else
                    {
                        m_infoWidgetCallback(new AppEvent(AppEvent.DATA_CREATE_INFOWIDGET, _infoData));
                    }
                }
            }

            private function widgetConfigLoadedHandler(event:Event):void
            {
                m_infoWidgetCallback(new AppEvent(AppEvent.DATA_CREATE_INFOWIDGET, _infoData));
            }

            private function moduleErrorHandler(event:ModuleEvent):void
            {
                this.cursorManager.removeBusyCursor();

                AppEvent.showError(event.errorText);
            }

            //child change handler
            //TODO: load preload the same way of loading controller
            private function widgetAddedHandler(event:AppEvent):void
            {
                preloadNextWidget();
            }

            private function focusWidgetHandler(event:AppEvent):void
            {
                var widgetId:int = Number(event.data);
                focusWidgetById(widgetId);
            }

            private function focusWidgetById(widgetId:int):void
            {
                var wgtContainer:IWidgetContainer = getWidgetContainer(widgetId);
                if (wgtContainer != null)
                {
                    wgtContainer.focusWidget(widgetId);
                }
            }

            private function widgetCloseHandler(event:AppEvent):void
            {
                var widgetId:Number = event.data as Number;

                var idx:Object = configData.widgetIndex[widgetId];

                if (idx == null)
                {
                    return;
                }

                var widget:IBaseWidget = null;

                if (widgetTable.containsKey(widgetId))
                {
                    widget = widgetTable.find(widgetId) as IBaseWidget;
                    widget.setState(WidgetStates.WIDGET_CLOSED);
                }
            }

            /**
             * in case regular widget is configured as controller and can be closed.
             */
            private var curId:Number;

            private function widgetClosedHandler(event:AppEvent):void
            {
                var data:Object = event.data;

                if (data.state as String == WidgetStates.WIDGET_CLOSED)
                {
                    curId = data.id as Number;

                    var timer:Timer = new Timer(500, 1);
                    timer.addEventListener(TimerEvent.TIMER_COMPLETE, removeWidget);
                    timer.start();
                }
            }

            private function removeWidget(event:TimerEvent):void
            {
                var widget:IVisualElement;
                for (var i:int = 0; i < controlContainer.numElements; i++)
                {
                    widget = controlContainer.getElementAt(i);

                    var baseWidget:IBaseWidget = widget as IBaseWidget;

                    if (baseWidget.widgetId == curId)
                    {
                        controlContainer.removeElement(widget);

                        return;
                    }
                }
            }
        ]]>
    </fx:Script>

</s:SkinnableContainer>
